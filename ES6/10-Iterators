// Due to increase in the work 
// 4 New Iterators are added to ES6 for different purposes and gives us optimized solution
// 1. Filter, Map, Some and Reduce

let personsList = [
    {id: 1, name : "Jphn", savedby : "CaptainAmerica"},
    {id: 2, name : "Alice", savedby : "IronMan"},
    {id: 3, name : "Roger", savedby : "CaptainAmerica"},
    {id: 4, name : "Adam", savedby : "IronMan"},
    {id: 5, name : "Alex", savedby : "SpiderMan"},
    {id: 6, name : "Robin", savedby : "Batman"},  
]

//Filter : helps us to iterate but 
//1. List the Persons saved by CA

let personSavedByCA = personsList.filter((person) => person.savedby == "CaptainAmeria")
console.log(personSavedByCA)
// console.log(personsList) //preserves the immutability

//Map: helps us to iterate as well as manipulate the list on the fly and return another list, means we can change the structure
//2. List the name of the Persons Saved by IronMan

let personSavedByIronMan = personsList.map((person)=> person.savedby == "IronMan"? person.name : "").filter ((name)=>name!="")
console.log(nameeOfpersonSavedByIronMan)

//append Lucky before the name of each person saved 
let luckyNames = personsList.map((person)=>"Lucky" + person.name)
console.log(luckyNames)

let luckyNamesPersonList = personsList.map((person)=>{
    if(person){
        return {
            id : person.id,
            "New Name" : "Lucky" + person.name

        }
    }
}
)
                                           
                                          
console.log(luckyNamesPersonList)

//short circuit - if we have condition present then true else false
let personSvdByHulk = personList.some(())

//4. Get the count of each person saved by every super hero of Marvel 
let eachSavedPersonCount = personsList.reduce((prevObject, currObject, index, list)=>{
      console.log(prevObject)
      console.log(currObject)
      console.log(index)
      return currObject
}, new Set())