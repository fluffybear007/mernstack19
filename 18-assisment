//March - MERNStack Session - Assessment Number 1 - 2nd October 2024
//Q1. Create a file with name basics and show all the features that you know about javascript?
// Try explaining in 1-2 lines : example - Prototype : An object which behaves as a link between two functions and provides inheritance

//Q2. As javascript is not a type safe and has auto cast feature - try showing below values from the same variable
// and its type as well :values are - "Robert ", .0266, false, {myname : "Test Me"}, 25166665, undefined, true, "Robert Jr.", null, {}, -32767

//Q3. Create a function with name showUserInfo, this function expects three params, firstname, lastname and age
//  print all the details in the given function

//Q4. Create a function with name doaddition, pass three parameters and return the sum of all the three numbers
// below output needs to be monitored - add(2,3,4), add(2), add(2.3,3), add("first", 2, "three")
// analyse the outputs we get and try explaining the reasons behind!!

//Q5. Give me an example of your choice for each of the below concepts
// a. closure, 
// b. hoisting, 
// c. constructor function

//Q6. What is the purpose of call, apply and bind ? and why they are used ? whats the difference between bind and apply ?

//Q7. Create an example of bind using Student object, where a function returns data with SetTimeOut and we fix it by bind.

//Q8. Create an example of creating object with null prototype

//Q9. How do we merge different objects properties using Object class function

//Q10. Create an object literal and export it to another file and import and show that there


//1.  basics
//   Javascript is a interpreted language <no compile time error, line by line execution and resutls on the fly>
//    A Javascript function is a block of code designed to perform a particular task. A JavaScript function is executed when "something" invokes it.
//    Hoisting is a JS mechanism that moves variable and function declarations to the top of their scope before the code runs. This applies to both global and local scopes.
//    A Closure is a function having access to the parent scope, even after the parent function has closed. Closures are created when a function is defined inside another function, allowing the inner function to maintain access to the outer function's variables.
//    In simpler terms, a closure is a function that's bundled with references to its surrounding state, this fives the funcction access to its outer scope.
//    All javascript objects inherit properties and methods from a prototype.


//2.  
var str = "Robert"
var num = .0266
var bool = false
var obj = {myname : "Text Me"}
var num = 25166665
var bool = true
var nul = nul
var obj = {}
var num = -32767

//3.
 function showUserInfo(firstname, lastname, age){
    console.log(firstname, lastname,age)
 }

 //4.
 function doaddition(a,b,c){
    console.log(a+b+c)
 }

 doaddition(2,3,4) //9
 doaddition(2) //2
 doaddition(2.3,3)//5.3
 doaddition("first", 2, "three")//error

 //5.
 // A closure is the combination of a function bundled together(enclosed) with references to its surrounding state. 
 // When you create a closure, you gain access to an outer function's scope from an inner function. 
 // Clossures are automatically created every time a function is defined in JavaScript.

 //6.
//the purpose of call apply bind is changing the context. 
//Apply invokes the function immediately and allows you to pass in arguments as an array. 
//Bind returns a new function, and you can invoke/call it anytime you want by invoking a functio

   